name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
    
jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Test with pytest
      run: |
        # Create test directories
        mkdir -p data/raw data/processed data/output logs
        pytest -v
        
  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Build Docker image
      run: docker build -t weather-pipeline:${{ github.sha }} .
    
    - name: Test Docker image
      run: |
        docker run --rm -e API_KEY=${{ secrets.OPENWEATHERMAP_API_KEY }} weather-pipeline:${{ github.sha }} --help
    
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Deploy with Docker Compose
      env:
        API_KEY: ${{ secrets.OPENWEATHERMAP_API_KEY }}
      run: |
        echo "API_KEY=$API_KEY" > .env
        docker-compose up -d
        
    - name: Wait for data processing
      run: |
        sleep 60  # Give it time to process data
        
    - name: Create artifacts
      run: |
        mkdir -p artifacts
        cp -r data/output/* artifacts/
        cp logs/pipeline.log artifacts/
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: weather-data-artifacts
        path: artifacts/
